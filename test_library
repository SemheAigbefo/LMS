import unittest
from Librarydb import (
    add_book_to_db,
    remove_book_from_db_by_isbn,
    search_books_in_db,
    get_books_from_db
)
from LibraryMS import Book, Library

class TestLibraryDB(unittest.TestCase):
    def setUp(self):
        # Add a test book
        self.test_book = Book("Happy", "Jay More", "111222333444", "2007")
        # Only add if not already exists to avoid duplicates
        remove_book_from_db_by_isbn("111222333444")  # Clean up first
        add_book_to_db(self.test_book)

    def tearDown(self):
        # Clean up - remove test book if it exists
        try:
            remove_book_from_db_by_isbn("111222333444")
        except:
            pass  # Ignore errors if book doesn't exist

    def test_add_book(self):
        # Test adding a different book to avoid duplicate key issues
        new_book = Book("Test Book", "Test Author", "999888777666", "2023")
        result = add_book_to_db(new_book)
        self.assertTrue(result, "add_book_to_db failed to add the book.")
        # Clean up the test book
        remove_book_from_db_by_isbn("999888777666")

    def test_remove_book(self):
        result = remove_book_from_db_by_isbn("111222333444")
        self.assertTrue(result, "remove_book_from_db failed to remove the book.")

    def test_search_books_by_title(self):
        results = search_books_in_db(1, "Happy")
        self.assertTrue(any("Happy" in str(book) for book in results), 
                       "search_books_in_db failed to find the book by title.")

    def test_search_books_by_isbn(self):
        results = search_books_in_db(2, "111222333444")
        self.assertTrue(any("111222333444" in str(book) for book in results), 
                       "search_books_in_db failed to find the book by ISBN.")

    def test_get_books(self):
        books = get_books_from_db()
        self.assertIsInstance(books, list, "get_books_from_db did not return a list.")
        self.assertGreater(len(books), 0, "No books found in database.")

class TestLibraryMS(unittest.TestCase):
    def test_book_creation(self):
        book = Book("Title", "Author", "ISBN", "2025")
        self.assertEqual(book.title, "Title", "Book title not set correctly.")
        self.assertEqual(book.author, "Author", "Book author not set correctly.")
        self.assertEqual(book.isbn, "ISBN", "Book ISBN not set correctly.")
        self.assertEqual(book.pub, "2025", "Book publication year not set correctly.")
        self.assertEqual(book.status, "available", "Book status not set to 'available'.")

    def test_library_load_books(self):
        library = Library()
        self.assertIsInstance(library.books, list, "Library books is not a list.")

    def test_library_display_books(self):
        library = Library()
        try:
            library.display_books()
            success = True
        except Exception as e:
            success = False
        self.assertTrue(success, "display_books() raised an exception")

if __name__ == "__main__":
    unittest.main(verbosity=2)